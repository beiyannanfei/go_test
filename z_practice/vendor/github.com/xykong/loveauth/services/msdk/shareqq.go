/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: shareqq
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.098125 +0800 CST m=+1.457800370
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]后台分享
// swagger:response DoShareQQRsp
// noinspection ALL
type DoShareQQRsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
	}
}

func ShareQQ(openId string, token string) (*DoShareQQRsp, error) {

	//noinspection ALL
	module := "/share/qq"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"openid":             openId,
		"userip":             "",
		"act":                0,
		"oauth_consumer_key": 0,
		"dst":                0,
		"flag":               0,
		"image_url":          "",
		"access_token":       "",
		"src":                0,
		"summary":            "",
		"target_url":         "",
		"title":              "",
		"fopenids":           nil,
		"previewText":        "",
		"game_tag":           "",
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("ShareQQ failed.")
		return nil, err
	}

	var data DoShareQQRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("ShareQQ failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
