/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: qqfriends_vip
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.092319 +0800 CST m=+1.451994153
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]会员信息
// swagger:response DoQQFriendsVIPRsp
// noinspection ALL
type DoQQFriendsVIPRsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
		//
		// 包含 :openid（string）用户id is_qq_vip（int） 是否为QQ会员（0：不是； 1：是） qq_vip_level（int）QQ会员等级（如果是QQ会员才返回） is_qq_year_vip（int）是否为年费QQ会员（0：不是； 1：是） is_qq_svip（int）是否为QQ超级会员（0：不是； 1：是）
		//
		Lists map[string]interface{} `json:"lists"`
		//
		// is_lost为1时表示oidb获取数据超时，建议游戏业务检测到is_lost为1时做降级处理，直接读取缓存数据或默认数据
		//
		IsLost string `json:"is_lost"`
	}
}

func QQFriendsVIP(openId string, token string) (*DoQQFriendsVIPRsp, error) {

	//noinspection ALL
	module := "/relation/qqfriends_vip"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":       AppId(platform),
		"openid":      openId,
		"fopenids":    nil,
		"flags":       "",
		"userip":      "",
		"pf":          "",
		"accessToken": token,
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("QQFriendsVIP failed.")
		return nil, err
	}

	var data DoQQFriendsVIPRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("QQFriendsVIP failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
