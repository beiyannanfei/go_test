/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: get_ccinfo
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.098633 +0800 CST m=+1.458308472
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: 查询ip的信息
// swagger:response DoGetCcInfoRsp
// noinspection ALL
type DoGetCcInfoRsp struct {
	// in: body
	Body struct {
		//
		// 返回码  0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
		//
		// 当前ip信息
		//
		Data map[string]interface{} `json:"data"`
		//
		// string，如果是网关，这里就是有值的，除此之外则认为是wifi，默认值为unknown
		//
		Apn string `json:"apn"`
		//
		// string，城市 （国内）
		//
		City string `json:"city"`
		//
		// string，国家
		//
		Country string `json:"country"`
		//
		// string，地区（国内）
		//
		District string `json:"district"`
		//
		// string，学校或单位或者网关名称（国内）
		//
		Extend string `json:"extend"`
		//
		// string，网络类型，默认为unknown
		//
		Nettype string `json:"nettype"`
		//
		// string，运营商字段
		//
		Oper string `json:"oper"`
		//
		// string，省会或直辖市（国内）
		//
		Province string `json:"province"`
	}
}

func GetCcInfo(openId string, token string) (*DoGetCcInfoRsp, error) {

	//noinspection ALL
	module := "/freeflow/get_ccinfo"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"openid": openId,
		"ip":     "",
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetCcInfo failed.")
		return nil, err
	}

	var data DoGetCcInfoRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetCcInfo failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
