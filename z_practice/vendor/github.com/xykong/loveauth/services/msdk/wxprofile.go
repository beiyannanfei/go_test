/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: wxprofile
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.094847 +0800 CST m=+1.454522422
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [微信]同玩好友信息(仅供精品游戏使用，无备注)
// swagger:response DoWXProfileRsp
// noinspection ALL
type DoWXProfileRsp struct {
	// in: body
	Body struct {
		//
		// 返回码  0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
		//
		// 信息列表vector<WXInfo>类型
		//
		Lists map[string]interface{} `json:"lists"`
		//
		// 用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）只返回首位openid对应的沃卡信息，其后的openid无法获取到沃卡信息
		//
		Privilege map[string]interface{} `json:"privilege"`
	}
}

func WXProfile(openId string, token string) (*DoWXProfileRsp, error) {

	//noinspection ALL
	module := "/relation/wxprofile"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":       AppId(platform),
		"accessToken": token,
		"openids":     nil,
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("WXProfile failed.")
		return nil, err
	}

	var data DoWXProfileRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("WXProfile failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
