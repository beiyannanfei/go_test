/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: wxget_first_reg
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.096608 +0800 CST m=+1.456283712
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [微信]获取玩家实名注册后首次登录标识
// swagger:response DoWXGetFirstRegRsp
// noinspection ALL
type DoWXGetFirstRegRsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则参见msg中返回的错误描述
		//
		Msg string `json:"msg"`
		//
		// 是否需要弹窗标识，"1":需要； 其他:不需要  备注：只有明确成功收到"1"的时候才弹窗，其它值或异常情况一律不做弹窗
		//
		NeedPop string `json:"need_pop"`
		//
		// 实名制标识，"1": 已实名； 其他:未实名
		//
		RealnameFlag string `json:"realname_flag"`
		//
		// 是否手机号注册标识，"1":是手机号注册； 其他:非手机号注册
		//
		MobileFlag string `json:"mobile_flag"`
	}
}

func WXGetFirstReg(openId string, token string) (*DoWXGetFirstRegRsp, error) {

	//noinspection ALL
	module := "/profile/wxget_first_reg"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"accessToken": token,
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("WXGetFirstReg failed.")
		return nil, err
	}

	var data DoWXGetFirstRegRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("WXGetFirstReg failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
