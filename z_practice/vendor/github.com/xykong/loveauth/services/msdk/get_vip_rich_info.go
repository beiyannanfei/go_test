/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: get_vip_rich_info
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.092515 +0800 CST m=+1.452190072
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]会员详情
// swagger:response DoGetVIPRichInfoRsp
// noinspection ALL
type DoGetVIPRichInfoRsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
		//
		// 判断是否有数据丢失。如果应用不使用cache，不需要关心此参数。0或者不返回：没有数据丢失，可以缓存。1：有部分数据丢失或错误，不要缓存。
		//
		IsLost string `json:"is_lost"`
		//
		// 标识是否QQ会员（0：不是； 1：是）
		//
		IsQQVIP string `json:"is_qq_vip"`
		//
		// QQ会员最后一次充值时间，标准时间戳
		//
		QQVIPStart string `json:"qq_vip_start"`
		//
		// QQ会员期限，标准时间戳
		//
		QQVIPEnd string `json:"qq_vip_end"`
		//
		// QQ年费会员最后一次充值时间，标准时间戳
		//
		QQYearVIPStart string `json:"qq_year_vip_start"`
		//
		// QQ年费会员期限，标准时间戳
		//
		QQYearVIPEnd string `json:"qq_year_vip_end"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述；QQ SVIP最后一次充值时间，标准时间戳
		//
		QQSVIPStart string `json:"qq_svip_start"`
		//
		// QQ SVIP期限，标准时间戳
		//
		QQSVIPEnd string `json:"qq_svip_end"`
		//
		// 标识是否QQ年费会员（0：不是； 1：是）
		//
		IsQQYearVIP string `json:"is_qq_year_vip"`
		//
		// 标识是否QQ超级会员（0：不是； 1：是）
		//
		IsSVIP string `json:"is_svip"`
	}
}

func GetVIPRichInfo(openId string, token string) (*DoGetVIPRichInfoRsp, error) {

	//noinspection ALL
	module := "/relation/get_vip_rich_info"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":       AppId(platform),
		"openid":      openId,
		"accessToken": token,
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetVIPRichInfo failed.")
		return nil, err
	}

	var data DoGetVIPRichInfoRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetVIPRichInfo failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
