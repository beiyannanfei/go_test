/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: get_groupopenid
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.093967 +0800 CST m=+1.453642614
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]公会绑群信息
// swagger:response DoGetGroupOpenIdRsp
// noinspection ALL
type DoGetGroupOpenIdRsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Message string `json:"message"`
		//
		// 判断是否有数据丢失，如果应用不使用cache，不需要关心此参数，0或者不返回：没有数据丢失，可以缓存。1：有部分数据丢失或错误，不要缓存
		//
		IsLost string `json:"is_lost"`
		//
		// 和游戏公会ID绑定的QQ群的groupOpenid，获取群成员信息、解绑群的时候作为输入参数
		//
		GroupOpenId string `json:"groupOpenid"`
		//
		// 平台错误码，当ret非0时关注
		//
		PlatCode string `json:"platCode"`
	}
}

func GetGroupOpenId(openId string, token string) (*DoGetGroupOpenIdRsp, error) {

	//noinspection ALL
	module := "/relation/get_groupopenid"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":       AppId(platform),
		"openid":      openId,
		"accessToken": token,
		"opt":         "",
		"unionid":     "",
		"zoneid":      "",
		"groupCode":   "",
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetGroupOpenId failed.")
		return nil, err
	}

	var data DoGetGroupOpenIdRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("GetGroupOpenId failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
