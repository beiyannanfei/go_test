/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: qqfriends_detail
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.091964 +0800 CST m=+1.451639130
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]好友信息
// swagger:response DoQQFriendsDetailRsp
// noinspection ALL
type DoQQFriendsDetailRsp struct {
	// in: body
	Body struct {
		//
		// 返回码  0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Msg string `json:"msg"`
		//
		// QQ同玩好友个人信息列表，类型vector
		//
		Lists []struct {
			OpenId      string `json:"openid"`
			Gender      string `json:"gender"`
			FigureUrlQQ string `json:"figureurl_qq"`
			NickName    string `json:"nickName"`
		} `json:"lists"`
		//
		// is_lost为1的时候表示获取的数据做了降级处理：此时业务层有缓存数据时，可以先用缓存数据；如果没有的话，再使用当前的数据，并且该标志打上1时，不要对这个数据进行缓存
		//
		IsLost string `json:"is_lost"`
		//
		// 对应的数据json对象
		//
		ExtInfo struct {
			//
			// 返回的数据列表
			//
			ClosefriendLists []string `json:"closefriend_lists"`
		} `json:"extinfo"`
	}
}

func QQFriendsDetail(openId string, token string) (*DoQQFriendsDetailRsp, error) {

	//noinspection ALL
	module := "/relation/qqfriends_detail"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":             AppId(platform),
		"openid":            openId,
		"accessToken":       token,
		"flag":              1,
		"closefriends_flag": 1,
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("QQFriendsDetail failed.")
		return nil, err
	}

	var data DoQQFriendsDetailRsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("QQFriendsDetail failed.")
		return nil, err
	}

	logrus.Infof("QQFriendsDetail: %v", data)

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
