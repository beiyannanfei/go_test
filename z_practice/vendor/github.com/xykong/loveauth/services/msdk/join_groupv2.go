/**
 * Generated by the loveworld utility tools.  DO NOT EDIT!
 * Source: join_groupv2
 * User: xy.kong@gmail.com
 * DateTime: 2018-03-27 12:17:25.092948 +0800 CST m=+1.452622856
 */
package msdk

import (
	"github.com/sirupsen/logrus"
	"encoding/json"
	"github.com/xykong/loveauth/errors"
)

//
// 应答: [手Q]加群
// swagger:response DoJoinGroupv2Rsp
// noinspection ALL
type DoJoinGroupv2Rsp struct {
	// in: body
	Body struct {
		//
		// 返回码 0：正确，其它：失败
		//
		Ret int `json:"ret"`
		//
		// ret非0，则表示“错误码，错误提示”，详细注释参见错误码描述
		//
		Message string `json:"message"`
		//
		// empty(string),预留
		//
		Data map[string]interface{} `json:"data"`
	}
}

func JoinGroupv2(openId string, token string) (*DoJoinGroupv2Rsp, error) {

	//noinspection ALL
	module := "/relation/join_groupv2"

	platform := QQ

	//noinspection SpellCheckingInspection
	body := map[string]interface{}{
		"appid":        AppId(platform),
		"openid":       openId,
		"accessToken":  token,
		"guild_id":     "",
		"zone_id":      "",
		"gc":           "",
		"platid":       "",
		"roleid":       "",
		"partition":    "",
		"user_zone_id": "",
		"user_label":   "",
		"nick_name":    "",
		"type":         "",
		"areaid":       "",
		"ip":           "",
		"port":         "",
	}

	//noinspection SpellCheckingInspection
	resp, err := PostRequestRaw(openId, platform, module, body)

	if err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("JoinGroupv2 failed.")
		return nil, err
	}

	var data DoJoinGroupv2Rsp
	if err := json.Unmarshal(resp, &data.Body); err != nil {
		logrus.WithFields(logrus.Fields{
			"error":  err,
			"module": module,
			"body":   body,
		}).Error("JoinGroupv2 failed.")
		return nil, err
	}

	if data.Body.Ret != 0 {
		return nil, errors.NewCode(errors.Failed)
	}

	return &data, nil
}
